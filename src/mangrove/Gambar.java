/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mangrove;

import java.awt.Graphics;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Hasan Mangrove
 */
public class Gambar extends javax.swing.JFrame {
    
    private ImageIcon ii;
    private JLabel imageLabel;
    /**
     * Creates new form Gambar
     */
    public ClassGambar gambar;
    public Gambar() {
        initComponents();
        slider_Brightness.addChangeListener(new SliderListener());
        isSliderUse(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jFrame1 = new javax.swing.JFrame();
        slider_Brightness = new javax.swing.JSlider();
        lbl_SliderNumber = new javax.swing.JLabel();
        slider_rotate = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        lbl_derajat = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnFile = new javax.swing.JMenu();
        miBuka = new javax.swing.JMenuItem();
        miSimpan = new javax.swing.JMenuItem();
        miKeluar = new javax.swing.JMenuItem();
        mnEdit = new javax.swing.JMenu();
        miGrayscale = new javax.swing.JMenuItem();
        miBiner = new javax.swing.JMenuItem();
        miDefault = new javax.swing.JMenuItem();
        miBrightness = new javax.swing.JMenuItem();
        m_rotate = new javax.swing.JMenu();
        mi_ZoomIn = new javax.swing.JMenuItem();
        mi_ZoomOut = new javax.swing.JMenuItem();
        mi_FlipVertikal = new javax.swing.JMenuItem();
        mi_FlipHorizontal = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu4 = new javax.swing.JMenu();
        mi_rotateRight90 = new javax.swing.JMenuItem();
        mi_rotateLeft90 = new javax.swing.JMenuItem();
        mi_rotate180 = new javax.swing.JMenuItem();
        mi_freeRotate = new javax.swing.JMenuItem();
        mi_translasi = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        mi_sharp = new javax.swing.JMenuItem();
        mi_blur = new javax.swing.JMenuItem();
        mi_highPass = new javax.swing.JMenuItem();
        mi_emboss = new javax.swing.JMenuItem();
        mi_unSharp = new javax.swing.JMenuItem();
        mi_gaussianNR = new javax.swing.JMenuItem();
        mi_edgeDetection = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar2.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar2.add(jMenu2);

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PCD");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        slider_Brightness.setMaximum(255);
        slider_Brightness.setMinimum(-255);
        slider_Brightness.setPaintTicks(true);
        slider_Brightness.setSnapToTicks(true);
        slider_Brightness.setToolTipText("");
        slider_Brightness.setValue(0);
        slider_Brightness.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(slider_Brightness, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 500, 327, -1));

        lbl_SliderNumber.setText("0");
        getContentPane().add(lbl_SliderNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 500, -1, -1));

        slider_rotate.setMaximum(360);
        slider_rotate.setOrientation(javax.swing.JSlider.VERTICAL);
        slider_rotate.setValue(0);
        slider_rotate.setEnabled(false);
        slider_rotate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_rotateStateChanged(evt);
            }
        });
        getContentPane().add(slider_rotate, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 50, -1, 350));

        jLabel1.setText("citra");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        lbl_derajat.setText("jLabel2");
        getContentPane().add(lbl_derajat, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 20, -1, -1));

        mnFile.setText("File");

        miBuka.setText("Buka");
        miBuka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBukaActionPerformed(evt);
            }
        });
        mnFile.add(miBuka);

        miSimpan.setText("Simpan");
        miSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSimpanActionPerformed(evt);
            }
        });
        mnFile.add(miSimpan);

        miKeluar.setText("Keluar");
        miKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miKeluarActionPerformed(evt);
            }
        });
        mnFile.add(miKeluar);

        jMenuBar1.add(mnFile);

        mnEdit.setText("Edit");

        miGrayscale.setText("Grayscale");
        miGrayscale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miGrayscaleActionPerformed(evt);
            }
        });
        mnEdit.add(miGrayscale);

        miBiner.setText("Biner");
        miBiner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBinerActionPerformed(evt);
            }
        });
        mnEdit.add(miBiner);

        miDefault.setText("Default");
        miDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDefaultActionPerformed(evt);
            }
        });
        mnEdit.add(miDefault);

        miBrightness.setText("Brightness");
        miBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBrightnessActionPerformed(evt);
            }
        });
        mnEdit.add(miBrightness);

        jMenuBar1.add(mnEdit);

        m_rotate.setText("Op. Geometri");

        mi_ZoomIn.setText("Zoom In");
        mi_ZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_ZoomInActionPerformed(evt);
            }
        });
        m_rotate.add(mi_ZoomIn);

        mi_ZoomOut.setText("Zoom Out");
        mi_ZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_ZoomOutActionPerformed(evt);
            }
        });
        m_rotate.add(mi_ZoomOut);

        mi_FlipVertikal.setText("Flip Vertikal");
        mi_FlipVertikal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_FlipVertikalActionPerformed(evt);
            }
        });
        m_rotate.add(mi_FlipVertikal);

        mi_FlipHorizontal.setText("Flip Horizontal");
        mi_FlipHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_FlipHorizontalActionPerformed(evt);
            }
        });
        m_rotate.add(mi_FlipHorizontal);
        m_rotate.add(jSeparator1);

        jMenu4.setText("Rotation");

        mi_rotateRight90.setText("Rotate right 90");
        mi_rotateRight90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_rotateRight90ActionPerformed(evt);
            }
        });
        jMenu4.add(mi_rotateRight90);

        mi_rotateLeft90.setText("Rotate left 90");
        mi_rotateLeft90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_rotateLeft90ActionPerformed(evt);
            }
        });
        jMenu4.add(mi_rotateLeft90);

        mi_rotate180.setText("Rotate 180");
        mi_rotate180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_rotate180ActionPerformed(evt);
            }
        });
        jMenu4.add(mi_rotate180);

        mi_freeRotate.setText("Free rotate");
        mi_freeRotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_freeRotateActionPerformed(evt);
            }
        });
        jMenu4.add(mi_freeRotate);

        m_rotate.add(jMenu4);

        mi_translasi.setText("Translasi");
        mi_translasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_translasiActionPerformed(evt);
            }
        });
        m_rotate.add(mi_translasi);

        jMenuBar1.add(m_rotate);

        jMenu3.setText("Op. Tetangga");

        mi_sharp.setText("Sharp");
        mi_sharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_sharpActionPerformed(evt);
            }
        });
        jMenu3.add(mi_sharp);

        mi_blur.setText("Blur");
        mi_blur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_blurActionPerformed(evt);
            }
        });
        jMenu3.add(mi_blur);

        mi_highPass.setText("High Pass");
        mi_highPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_highPassActionPerformed(evt);
            }
        });
        jMenu3.add(mi_highPass);

        mi_emboss.setText("Emboss");
        mi_emboss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_embossActionPerformed(evt);
            }
        });
        jMenu3.add(mi_emboss);

        mi_unSharp.setText("UnSharp");
        mi_unSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_unSharpActionPerformed(evt);
            }
        });
        jMenu3.add(mi_unSharp);

        mi_gaussianNR.setText("Gaussian NR");
        mi_gaussianNR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_gaussianNRActionPerformed(evt);
            }
        });
        jMenu3.add(mi_gaussianNR);

        mi_edgeDetection.setText("Edge Detection");
        mi_edgeDetection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_edgeDetectionActionPerformed(evt);
            }
        });
        jMenu3.add(mi_edgeDetection);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public class SliderListener implements ChangeListener {

        @Override
        public void stateChanged(ChangeEvent e) {
            int value = slider_Brightness.getValue();
            String str = Integer.toString(value);
            lbl_SliderNumber.setText(str);
            gambar.Brightness(slider_Brightness.getValue());
            jLabel1.setIcon(gambar.ScaleResultIcon);
            
        }     
    }
    
    private void isSliderUse(boolean kondisi){
        if(kondisi == true){
            
            slider_Brightness.setVisible(true);
            lbl_SliderNumber.setVisible(true);
        } else {
            
            slider_Brightness.setVisible(false);
            lbl_SliderNumber.setVisible(false);
        }
        
    }
    
    @Override
    public void paint (Graphics g) {
        super.paint(g);
        
    }
    
    private void miBukaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miBukaActionPerformed
        // TODO add your handling code here:
        JFileChooser TDialog = new JFileChooser();
        if(TDialog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            gambar = new ClassGambar(TDialog.getSelectedFile().getAbsolutePath(), 355, 355);
            jLabel1.setIcon(gambar.GetIcon());
           
        }
    }//GEN-LAST:event_miBukaActionPerformed

    private void miSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSimpanActionPerformed
        // TODO add your handling code here:
        JFileChooser TDialog = new JFileChooser();
        if(TDialog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            gambar.SaveImage(TDialog.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_miSimpanActionPerformed

    private void miKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miKeluarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_miKeluarActionPerformed

    private void miGrayscaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miGrayscaleActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.Grayscale();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_miGrayscaleActionPerformed

    private void miBinerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miBinerActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.Biner();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_miBinerActionPerformed

    private void miDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDefaultActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.Default();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_miDefaultActionPerformed

    private void miBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miBrightnessActionPerformed
        // TODO add your handling code here:
        isSliderUse(true);
        gambar.Brightness(slider_Brightness.getValue());
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_miBrightnessActionPerformed

    private void mi_ZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_ZoomOutActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.zoomOut();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_ZoomOutActionPerformed

    private void mi_FlipVertikalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_FlipVertikalActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.flipV();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_FlipVertikalActionPerformed

    private void mi_FlipHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_FlipHorizontalActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.flipH();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_FlipHorizontalActionPerformed

    private void mi_ZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_ZoomInActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.zoomIn();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_ZoomInActionPerformed

    private void mi_rotateRight90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_rotateRight90ActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.rotasiCitra(90, this);
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_rotateRight90ActionPerformed

    private void mi_rotate180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_rotate180ActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.rotasiCitra(180, this);
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_rotate180ActionPerformed

    private void slider_rotateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_rotateStateChanged
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.rotasiCitra((double)slider_rotate.getValue(), this);
        int a = slider_rotate.getValue();
        lbl_derajat.setText(Integer.toString(a));
        jLabel1.setIcon(gambar.ScaleResultIcon);
        

       
    }//GEN-LAST:event_slider_rotateStateChanged

    private void mi_rotateLeft90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_rotateLeft90ActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.rotasiCitra(-90, this);
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_rotateLeft90ActionPerformed

    private void mi_freeRotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_freeRotateActionPerformed
        // TODO add your handling code here:
        slider_rotate.setEnabled(true);
    }//GEN-LAST:event_mi_freeRotateActionPerformed

    private void mi_translasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_translasiActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_mi_translasiActionPerformed

    private void mi_edgeDetectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_edgeDetectionActionPerformed
        isSliderUse(false);
        gambar.edgeDetection();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_edgeDetectionActionPerformed

    private void mi_gaussianNRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_gaussianNRActionPerformed
        isSliderUse(false);
        gambar.gaussian();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_gaussianNRActionPerformed

    private void mi_highPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_highPassActionPerformed
        isSliderUse(false);
        gambar.highPass();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_highPassActionPerformed

    private void mi_embossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_embossActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.emboss();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_embossActionPerformed

    private void mi_unSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_unSharpActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.unSharp2();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_unSharpActionPerformed

    private void mi_sharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_sharpActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.sharp();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_sharpActionPerformed

    private void mi_blurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_blurActionPerformed
        // TODO add your handling code here:
        isSliderUse(false);
        gambar.blur();
        jLabel1.setIcon(gambar.ScaleResultIcon);
    }//GEN-LAST:event_mi_blurActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gambar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gambar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gambar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gambar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gambar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lbl_SliderNumber;
    private javax.swing.JLabel lbl_derajat;
    private javax.swing.JMenu m_rotate;
    private javax.swing.JMenuItem miBiner;
    private javax.swing.JMenuItem miBrightness;
    private javax.swing.JMenuItem miBuka;
    private javax.swing.JMenuItem miDefault;
    private javax.swing.JMenuItem miGrayscale;
    private javax.swing.JMenuItem miKeluar;
    private javax.swing.JMenuItem miSimpan;
    private javax.swing.JMenuItem mi_FlipHorizontal;
    private javax.swing.JMenuItem mi_FlipVertikal;
    private javax.swing.JMenuItem mi_ZoomIn;
    private javax.swing.JMenuItem mi_ZoomOut;
    private javax.swing.JMenuItem mi_blur;
    private javax.swing.JMenuItem mi_edgeDetection;
    private javax.swing.JMenuItem mi_emboss;
    private javax.swing.JMenuItem mi_freeRotate;
    private javax.swing.JMenuItem mi_gaussianNR;
    private javax.swing.JMenuItem mi_highPass;
    private javax.swing.JMenuItem mi_rotate180;
    private javax.swing.JMenuItem mi_rotateLeft90;
    private javax.swing.JMenuItem mi_rotateRight90;
    private javax.swing.JMenuItem mi_sharp;
    private javax.swing.JMenuItem mi_translasi;
    private javax.swing.JMenuItem mi_unSharp;
    private javax.swing.JMenu mnEdit;
    private javax.swing.JMenu mnFile;
    private javax.swing.JSlider slider_Brightness;
    private javax.swing.JSlider slider_rotate;
    // End of variables declaration//GEN-END:variables
}
